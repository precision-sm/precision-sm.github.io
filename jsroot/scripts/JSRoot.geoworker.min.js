JSROOT={BIT:function(a){return 1<<a}};var jscsg;JSROOT.define=function(a,b){1==a.length?jscsg=b(THREE):b(THREE,jscsg)};importScripts("three.min.js","JSRoot.csg.js","JSRoot.geobase.js");console&&console.log("geoworker started "+THREE.REVISION);var clones=null;
onmessage=function(a){if("string"==typeof a.data)console.log("Worker get message "+a.data);else if("object"==typeof a.data){a.data.tm1=(new Date).getTime();if(a.data.init){var b=a.data.clones;b&&(clones=new JSROOT.GEO.ClonedNodes(null,b),clones.setVisLevel(a.data.vislevel),clones.setMaxVisNodes(a.data.maxvisnodes),delete a.data.clones,clones.sortmap=a.data.sortmap);JSROOT.browser=a.data.browser;a.data.tm2=(new Date).getTime();return postMessage(a.data)}if(a.data.shapes){b=a.data.shapes;for(var f=
[],d=0;100>d;++d){var c=clones.buildShapes(b,a.data.limit,1E3);if(c.done)break;postMessage({progress:"Worker creating: "+c.shapes+" / "+b.length+" shapes,  "+c.faces+" faces"})}for(d=0;d<b.length;++d){c=b[d];if(c.geom){var e=void 0;c.geom instanceof THREE.BufferGeometry?e=c.geom:(new THREE.BufferGeometry).fromGeometry(c.geom);c.buf_pos=e.attributes.position.array;c.buf_norm=e.attributes.normal.array;f.push(c.buf_pos.buffer,c.buf_norm.buffer);delete c.geom}delete c.shape}a.data.tm2=(new Date).getTime();
return postMessage(a.data,f)}if(void 0!==a.data.collect)return clones.setVisibleFlags(a.data.flags),delete a.data.flags,clones.produceIdShifts(),b=null,a.data.matrix&&(b=(new THREE.Matrix4).fromArray(a.data.matrix)),delete a.data.matrix,b=clones.collectVisibles(a.data.collect,JSROOT.GEO.createFrustum(b)),a.data.new_nodes=b.lst,a.data.complete=b.complete,a.data.tm2=(new Date).getTime(),postMessage(a.data)}};
